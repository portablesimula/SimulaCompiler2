
% ===============================================   Main   program =============
%  PROGRAM NAME:   SIMULA A/S - SIMULA TEST NO 151
%
%  PURPOSE:     Test multiple assignments
%
%  METHOD:      Try some examples and see if they work as expected.
%
%  WRITTEN BY:  MYH
% ==============================================================================
external class SimulaTest;

SimulaTest(151,"--- Test multiple assignments") begin
   text array facit(0:15);
   integer traceCase;
   
   procedure trace(msg); text msg;
   begin
      if verbose then
      	 begin outtext(msg); outimage; end;
      if msg ne facit(traceCase) then
      begin err("Case " & edit(traceCase));
         outtext("Trace: """ & msg & """"); outimage;
         outtext("Facit: """ & facit(traceCase) & """"); outimage;
      end;
      traceCase:=traceCase+1;
   end;

	class A; begin 
		boolean A_B;
		character A_C;
		integer A_I;
		real A_R;
		long real A_L;
		text A_T;
 
		boolean procedure P_BOOL(par_B); boolean par_B; begin
			boolean P_B;
			P_B := P_BOOL := par_B := A_B := true;
			trace("P_B=" & edit(P_B) & ", par_B=" & edit(par_B));
		end;
 
		character procedure P_CHAR(par_C); character par_C; begin
			character P_C;
			P_C := P_CHAR := par_C := A_C := 'Z';
			trace("P_C=" & edit(P_C) & ", par_C=" & edit(par_C));
		end;
 
		integer procedure P_INT(par_I); integer par_I; begin
			integer P_I;
			P_I := P_INT := par_I := A_I := 5632;
			trace("P_I=" & edit(P_I) & ", par_I=" & edit(par_I));
		end;

		real procedure P_REA(par_R); real par_R; begin
			real P_R;
			P_R := P_REA := par_R := A_R := 7353;
			trace("P_R=" & edfix(P_R,2) & ", par_R=" & edfix(par_R,2));
		end;

		long real procedure P_LRL(par_L); long real par_L; begin
			long real P_L;
			P_L := P_LRL := par_L := A_L := 6731.45;
			trace("P_L=" & edfix(P_L,2) & ", par_L=" & edfix(par_L,2));
		end;
 
		text procedure P_TXT1(par_T); text par_T; begin
			text P_T;
			P_T :- P_TXT1 :- par_T :- A_T :- "Abra";
			trace("P_T=" & P_T & ", par_T=" & par_T);
		end;
 
		text procedure P_TXT2(par_T); text par_T; begin
			text P_T;
			P_TXT2 :- blanks(10);
         outtext("Trace: """ & A_T & """"); outimage;
			P_T := P_TXT2 := par_T := A_T := "Cadab";
%			P_TXT2 := par_T := P_T := A_T := "Cadab";
         outtext("Trace: """ & A_T & """"); outimage;
			trace("P_T=" & P_T & ", par_T=" & par_T);
		end;
	end;

	boolean b,b1;
	character c,c1;
	integer i,i1;
	real r,r1;
	long real lr,lr1;
	text t,t1;
	ref(A) x;

	facit(0) :- "At START";
	
	facit(1) :- "P_B=true, par_B=true";
	facit(2) :- "x.A_B=true, b1=true";
	
	facit(3) :- "P_C=Z, par_C=Z";
	facit(4) :- "x.A_C=Z, c1=Z";

	facit(5) :- "P_I=5632, par_I=5632";
	facit(6) :- "x.A_I=5632, i1=5632";
	
	facit(7) :- "P_R=7353.00, par_R=7353.00";
	facit(8) :- "x.A_R=7353.00, r1=7353.00";
	
	facit(9) :- "P_L=6731.45, par_L=6731.45";
	facit(10) :- "x.A_L=6731.45, lr1=6731.45";
	
	facit(11) :- "P_T=Abra, par_T=Abra";
	facit(12) :- "x.A_T=Abra, t1=Abra";
	
	facit(13) :- "P_T=Cadab     , par_T=Cadab";
	facit(14) :- "x.A_T=Cadab, t1=Cadab     ";
	
	facit(15) :- "At END";
	
% ========================================================

	trace("At START");

	x :- new A;
	b1 := x.P_BOOL(b);
	trace("x.A_B=" & edit(x.A_B) & ", b1=" & edit(b1));

	c1 := x.P_CHAR(c);
	trace("x.A_C=" & edit(x.A_C) & ", c1=" & edit(c1));

	i1 := x.P_INT(i);
	trace("x.A_I=" & edit(x.A_I) & ", i1=" & edit(i1));

	r1 := x.P_REA(r);
	trace("x.A_R=" & edfix(x.A_R,2) & ", r1=" & edfix(r1,2));

	lr1 := x.P_LRL(lr);
	trace("x.A_L=" & edfix(x.A_L,2) & ", lr1=" & edfix(lr1,2));

	t1 :- x.P_TXT1(t);
	trace("x.A_T=" & x.A_T & ", t1=" & t1);

	t1 :- x.P_TXT2(t);
	trace("x.A_T=" & x.A_T & ", t1=" & t1);

	trace("At END");

 end;
