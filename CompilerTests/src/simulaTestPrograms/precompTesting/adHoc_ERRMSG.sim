External class adHoc_COMMON;

adHoc_COMMON class adHoc_ERRMSG;

hidden protected uplim,messlength,
                 printDiag,diagmerge,GiveMessage,abortCompilation,
                 lasterrpos,lasterrmess,lasterrline;

%      -----------------------------------------------------------------
%      ---  COPYRIGHT 1988 by                                        ---
%      ---  Simula a.s.                                              ---
%      ---  Oslo, Norway                                             ---
%      ---                                                           ---
%      ---                 P O R T A B L E     S I M U L A           ---
%      ---              F R O N T - E N D    C O M P I L E R         ---
%      ---                  E r r o r   M e s s a g e s              ---
%      ---                                                           ---
%      --- Selection switches: KI                                    ---
%      ---                                                           ---
%      ---    'D' Included when dump is wanted                       ---
%      ---    'K' Included always when quick capability wanted       ---
%      ---    'P' Included to make compiler use quick procedures     ---
%      ---    'I' Included to make compiler use inserted mnemonics   ---
%      ---                                                           ---
%      -----------------------------------------------------------------
begin

%SPORT ON
%REUSE ON
%-Z %RECORD ON

%+I %INSERT $SIMSRC/fec/common.mne

      short integer numwarnfound;! number of warnings              ;
      short integer maxerrno;
      integer uplim=450;     !*** index of last message     ***;

      ref(directfile) ERRORFILE; boolean ERRnotopen;
%     ref(directbytefile) ERRORFILE; boolean ERRnotopen;
      integer messlength=50; !*** length of largest message ***;

%title ******   General Diagnostic Routines   ******

% P   prior
      procedure printDiag(t); text t; !*** print message ***;
      if t =/= notext then begin
%+T			outimage; outimage; outtext("ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR "); outimage;
      		outtext(t); outimage;       !    - on SYSOUT;
%+T			outtext("ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR "); outimage; outimage;
            if listfile=/=sysout then inspect listfile do begin
               outtext(t); outimage;    !and on listfile, if any;
            end;
      end;

% P   prior
      procedure GiveMessage(ec,index); character ec;short integer index;
      begin short integer i; text t,tout;
         if messageLinenr<=0 then messageLinenr:=linenr;
         t:-  if ec=NUL then "Note!: " else if ec='!1!' then "Warn.: "
         else if ec='!2!' then "ERROR: " else              "FATAL: ";
         if (currentpass>'1' or ec>='!3!') and then messageLinenr>0
         then begin
            tout:-leftint(messageLinenr); t:- t & "(l. " & tout & ") " ;
         end;
         messageLinenr:=0; i:=t.length+1;

         tout:-diagMerge(index); t:- t & tout;

         while t.length > 78 do begin !*** break message;
               t.setpos(79);
               while t.getchar <> ' ' do t.setpos(t.pos-2);
               tout:-t.sub(1,t.pos-2); t:-t.sub(t.pos,t.length-t.pos+1);
               printDiag(tout);
         end;

         printDiag(t);
         if ec='!1!' then numwarnfound:=numwarnfound+1;
         if ec='!2!' then begin
            numerrfound:=numerrfound+1;
            if termstatus<'5' then termstatus:='5';
%+D         giveintinfo(1,rank(termstatus)-rank('0'));
         end;
%+Z      RTS_utility(rank(ec),0);
         if numerrfound>maxerrno or ec>'!2!' then AbortCompilation;
      end;
%page
      text procedure diagmerge(n); short integer n;
      begin text result,t,t2; short integer i;
            diagmerge:-t:-errmsg(n);
            if diag(0) =/= notext then begin
               while diag(i) =/= notext do begin
                  if loadchar(diag(i),0)='_' and then 
                     loadchar(diag(i),1)='_'
                  then begin
                     if n=337 then begin
                        diagmerge:-errmsg(168); goto EX end;
                     if n=427 then begin
                        diagmerge:-errmsg(358); goto EX end;
                     if n=426 then begin
                        diagmerge:-errmsg(234); goto EX end;
                     diag(i):-"ACTIVATE";
                  end;
                  while t.more do
                     if t.getchar='?' then begin
                        t2:-t.sub(1,t.pos-2);
                        t:-t.sub(t.pos,t.length-t.pos+1);
                        goto CONCAT;
                     end;
                  t2:-t; t:-notext;
      CONCAT:
                  result:-result & t2 & diag(i) ;
                  diag(i):-notext; i:=i+1;
               end;
               diagmerge:-result & t ;
            end;
  EX: end;


      text procedure errmsg(i); short integer i;
      begin text t;
            if i=0 then  !errmsg:-notext;
       else if ERRnotopen then begin
      SETNUM:  errmsg:-t:-copy(" ERROR ... "); t.sub(8,3).putint(i);
            end
       else if i > 0 and then i <= uplim then begin
               if ERRORFILE==none then begin
                  t:-gettextinfo(22);
                  if t==notext then t:-"FECERROR";   ! WHAT ELSE ?;
%                 ERRORFILE:-new directbytefile(t);
%                 ERRORFILE.setaccess("nocreate");
%                 if not ERRORFILE.open then begin
                  ERRORFILE:-new directfile(t);
                  ERRORFILE.setaccess("READONLY");
               end;
               if not ERRnotopen then begin
                  t:-blanks(50);
                  if not ERRORFILE.open(t) then begin
                     printDiag("*** CAN'T OPEN DIAGNOSTICS FILE ***");
                     ERRnotopen:=true; goto SETNUM;
                  end;
%                   ERRORFILE.locate(i+i+i);
%                   i:=ERRORFILE.in2byte*256+ERRORFILE.inbyte;
%                   length:=ERRORFILE.in2byte*256+ERRORFILE.inbyte-i;
%                   ERRORFILE.locate(i); errmsg:-t:-blanks(length);
%                   ERRORFILE.intext(t);
                  ERRORFILE.locate(i); ERRORFILE.inimage;
                  if ERRORFILE.endfile then begin
                     printDiag("*** INCOMPATIBLE DIAGNOSTICS FILE ***");
                     goto SETNUM;
                  end;
                  errmsg:-copy(ERRORFILE.image.strip);
                  ERRORFILE.close;
               end;
            end
            else begin errmsg:-t:-copy("*** DIAGNOSTIC ERROR: .....");
                       t.sub(23,5).putint(i) end;
      end;
%title ******   Pass 1 Error Routines   ******

      short integer lasterrpos,lasterrmess,errloop;
            integer lasterrline;

% P   prior
      procedure outP1message(where,message,code);
      short integer where,message; character code;
      begin text marker,utlin; short integer tabcor;
            character ISOtab='!9!';
            if lasterrline=linenr and then
               (lasterrpos>=where or lasterrmess=message)
            then begin
               errloop:=errloop+1;
               if errloop>4 then fatal0(0);
                  ! stop possible looping - this is a FIX;
               goto NOMESS;
            end;
            errloop:=0;
            lasterrmess:=message;
%           utlin:-line.sub(1,if linelength<listlength
%                                then linelength else listlength);
            utlin:-line;
            if lasterrline<>linenr then begin !test for listing;
               if not listingon or else listfile=/=sysout
               then begin
                  outint(linenr,6); outtext(": "); outtext(utlin);
                  outimage;
               end;
            end;
            if lasterrpos<>where or lasterrline<>linenr then begin
               tabcor:=where+7; utlin.setpos(1);
               !*** TAB expand according to DOS/UNIX standard ***;
               while utlin.more do if utlin.getchar=ISOtab then
                     tabcor:=tabcor + 8 - rem(7,utlin.pos);
               marker:-blanks(tabcor);
               marker.setpos(9);
               while marker.pos<tabcor do marker.putchar('=');
               marker.putchar('I'); printDiag(marker);
            end;
            lasterrline:=linenr; lasterrpos:=where;
            GiveMessage(code,message);
      NOMESS:
      end;

% P   prior
      procedure parserMessage(errpos,n1,n2); short integer errpos,n1,n2;
      begin if n2<>0 then begin
               diag(0):-errmsg(n2); diag(0):-" - " & diag(0) end;
            outP1message(errpos,n1,'!2!') end;

      procedure COMMONerror(EXC_NUMBER); short integer EXC_NUMBER;
      !*** virtual match ***;
      if EXC_NUMBER>0 then fatal0(EXC_NUMBER)
      else begin EXC_NUMBER:=-EXC_NUMBER;
          if EXC_NUMBER = 106 then begin
             ! here we can only try to give a message on SYSOUT !!!!! ;
             outtext("*** NO MORE DISK or FILE SPACE ***");
          end
          else begin
             if EXC_NUMBER = 11 then begin
                outtext("*** COMPILATION KILLED");
             end
             else begin
                if numerrfound=0 then begin
	          outtext("*** INTERNAL ERROR (RTS error #");
                  outint(EXC_NUMBER,0); outtext(")");
                end
                else outtext("*** Compiler cannot recover, ABORT");
                if linenr > 0 then begin
                   outtext(" at source line "); outint(linenr,0);
                end;
%+Z             outtext(if currentpass='1' then " (Pass1) ***"
%+Z                                        else " (Pass2) ***");
             end;
             if listfile=/=none and then listfile=/=sysout then begin
                listfile.outtext(sysout.image.strip); listfile.outimage;
             end;
          end;
          outimage;
%+Z       RTS_Utility(3,0);
          ENDCOMP;
      end;
%title ******   Pass 2 Error Routines   ******

      text procedure qlin(r); ref(quantity) r;
      begin text ltxt;
         if r=/=none then begin
            if r.line > 0 then begin
               ltxt:-leftint(r.line); ltxt:-"(l. " & ltxt & ")"; end
            else ltxt:-"(ext.)";
            qlin:-r.symb.symbol & ltxt;
         end;
      end;

% %+P   prior
      procedure errQT(q,n); ref(quantity) q; short integer n;
      if q=/=none then
      begin messageLinenr:=q.line; error1id(n,q.symb);
% %+P         q:-none; !*** GC ***;
      end;

% %+P   prior
      procedure errQTN(q,n,qt); ref(quantity) q,qt; short integer n;
      begin diag(1):-qlin(qt); errQT(q,n);
% %+P         q:-qt:-none; !*** GC ***;
      end;

% P   prior
      procedure error1qlin(n,q); short integer n; ref(quantity) q;
      begin diag(0):-qlin(q); error0(n);
% P         q:-none; !*** GC ***;
      end;

% P   prior
      procedure error2quants(n,q,qt);short integer n;ref(quantity) q,qt;
      begin diag(1):-qlin(qt); error1id(n,q.symb);
% P         q:-none; !*** GC ***;
      end;

      procedure notimp(t); text t;
      begin diag(0):-t; fatal0(309); end;

% %+P   prior
      ref(quantity)procedure newnotseen(symx); ref(symbolbox) symx;
      begin ref(quantity)q;
         inspect new quantity do begin
            q:-unknowns.fpar;
            if q==none then
            begin unknowns.fpar:-this quantity; virtno:=1 end
       else begin while q.next=/=none do q:-q.next;
                  q.next:-this quantity;
                  virtno:=q.virtno+1;
            end;
            symb:-symx;
            categ:=C_unknwn; kind:=K_error; type:=IELSE; plev:=one;
            line:=linenr; dim:=1; encl:-unknowns;
            ! not used unknowns.nloc:=unknowns.nloc+1;
            ! prevmeaning:-symx qua identsymbol.curmeaning;
            newnotseen:- symb qua identsymbol.curmeaning:-this quantity;
         end inspect;
% %+P      q:-none;    !*** GC ***;
% %+P      symx:-none; !*** GC ***;
      end of newnotseen;

%title ******   D I A G N O S T I C   P R O C E D U R E S   *****

      procedure note0(n); short integer n; begin end;
      procedure error0(n); short integer n; begin end;
      procedure fatal0(n); short integer n; begin end;
      procedure internerr(module,lnr); character module; short integer lnr; begin end;
      procedure note1(n,t); short integer n; text t; begin end;
      procedure note1id(n,symb); short integer n; ref(symbolbox) symb; begin end;
      procedure removeVis(brc,visp,err); ref(brecord) brc; ref(idpack) visp; short integer err; begin end;
      procedure error1(n,t); short integer n; text t; begin end;
      procedure error1id(n,symb); short integer n; ref(symbolbox) symb; begin end;
      procedure openerror(fname);  text fname; begin end;
      procedure error2(n,t1,t2); short integer n; text t1,t2; begin end;
      procedure error2xx(n1,n2,n3); short integer n1; character n2,n3; begin end;


%title *****   A B O R T   -   E X C E P T I O N S   *****

      procedure AbortCompilation;
      begin
     end;

end ERRMSG;
